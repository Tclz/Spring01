<?xml version="1.0" encoding="UTF-8"?>
<!-- XML形式的Ioc要使用的配置-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 将对象的创建交给spring来管理-->

    <bean id="accountDao" class="com.impl.AccountDaoImpl" ></bean>
    <!--spring对bean的管理细节
    1.创建bean的三种方式
    2.bean对象的作用范围
    3.bean对象的生命周期-->



    <!-- 创建bean的三种方式-->
    <!-- 第一种：使用默认构造函数创建。
         在spring的配置文件中使用bean标签。配以id和class属性后，且没有其他属性标签时。采用的就是默认构造函数创建bean对象，
         此时如果类中无默认构造函数，则对象无法创建。如下面例子所示
    <bean id="accountService" class="com.impl.AccountServiceImpl"></bean>  -->

    <!-- 第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
    <bean id="instanceFactory" class="com.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean> -->

    <!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中静态方法创建对象，并存入spring容器）
    <bean id="accountService" class="com.factory.StaticFactory" factory-method="getAccountService"></bean> -->


    <!-- bean的作用范围调整
    bean标签的scope属性：
                    作用：用于指定bean的作用范围
                    取值：（前两个是常用的）
                        singleton:单例创建 （也是默认创建方式）
                        prototype：多例创建
                        request: 作用于web应用的请求范围
                        session:  作用于web应用的会话范围
                        global-session: 作用于集群环境的会话范围（全局会话范围），当不是集群环境是 它就是session

    -->
    <!--
    <bean id="accountService" class="com.impl.AccountServiceImpl" scope="prototype" init-method="init" destroy-method="destroy"></bean>
     -->

    <!-- bean对象的生命周期：
            单例对象：
                    出生：当容器创建时对象出生
                    或者：只要容器还在 对象一直活着
                    死亡：容器销毁 对象死亡
                    总结：单例对象生命周期和容器相同

            多例对象：
                    出生：当使用对象时由spring框架创建
                    活着：对象只要是在使用过程中就一直或者
                    死亡：当对象长时间不用，且没有别的对象引用时，由Java的GC回收 -->



    <!-- spring中的依赖注入
            依赖注入：
                Dependency Injection
            IOC的作用：
                降低程序间的耦合（依赖关系）
            依赖关系的管理：都交给spring来维护
            在当前类中要用到其他类的对象，由spring来创建，只需要在配置文件中说明。依赖关系的维护就称之为依赖注入。
            依赖注入的类型：
                3类：
                基本类型和String
                其他bean类型
                复杂类型(集合类型)
            注入的方式：
                1. 使用构造函数提供
                2. 使用set方法提供
                3. 使用注解提供
     -->

    <!-- 第一种注入方式 构造函数的注入：
                使用的标签：constructor-arg
                标签出现的位置：bean标签的内部
                标签中的属性：
                        type:  用于指定要注入的数据的数据类型，该数据的类型也是构造函数中某个或某些参数的类型
                        index: 用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
                        name:  用于指定给构造函数中指定的参数赋值
                        ==============以上三个用于指定给构造函数中哪个参数赋值==============================
                        value:
                        ref:
                优势：
                    在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
                弊端：
                    改变了bean对象的实例方式，使得在创建对象时即使这些数据用不上，也必须提供
     -->
    <bean id="accountService" class="com.impl.AccountServiceImpl">
        <constructor-arg  name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="20"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>

    </bean>

    <!-- 配置一个日期对象 -->
    <bean id="now" class="java.util.Date">
    </bean>


    <!-- set方法注入：
         涉及的标签：property
         出现的位置：bean标签的内部
         标签的属性：
                name: 用于指定注入时所调用的set方法名称
                value: 用于提供基本类型和String类型的数据
                ref: 用于指定其他的bean对象。它指的是在spring容器中出现过的bean对象
         优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
         缺点：
            如果某个成员必须有值，则获取对象有可能set方法没有执行
                -->
    <bean id="accountService2" class="com.impl.AccountServiceImpl2" >
        <property name="name" value="test"></property>
        <property name="age" value="20"></property>
        <property name="birthday" ref="now"></property>
    </bean>


    <!-- 复杂类型/集合类型的注入
        用于给List结构集合注入的标签：
            list array set
        用于给Map结构集合注入的标签：
            map props
        结构相同，标签可以互换

    -->
    <bean id="accountService3" class="com.impl.AccountServiceImpl3" >
        <property name="myStrs">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="mySet">
            <set>
                <value>123</value>
                <value>456</value>
            </set>
        </property>
        <property name="myList">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>
        <property name="myMap">
            <map>
                <!-- 键值对的两种写法-->
                <entry key="test_a" value="aaa"></entry>
                <entry key="test_b" >
                    <value>bbb</value>
                </entry>
            </map>
        </property>
        <property name="myProperties">
            <props>
                <prop key="test_c">ccc</prop>
                <prop key="test_d">ddd</prop>
            </props>
        </property>
    </bean>

</beans>