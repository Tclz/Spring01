<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 基于XML配置的Spring AOP 实现-->


    <!-- 被代理对象中的所有方法都是连接点，只有被增强的方法称为切入点-->
    <!--配置需要被增强的Service对象-->
    <bean id="accountService" class="com_5.impl.AccountServiceImpl"></bean>

    <!-- spring中基于XML的AOP配置步骤
        1.把通知Bean也交给spring来管理
        2.使用aop：config标签表明开始AOP的配置
        3.使用aop: aspect标签表明开始配置切面    切入点+通知=切面
                属性：
                    id ： 提供一个唯一的标识
                    ref : 指定通知类bean的id
        4.在aop:aspect标签的内部使用对应的标签来配置通知的类型
            我们的示例是让printLog方法在切入点方法执行之前执行，所以是前置通知
            aop:before:表示配置前置通知
                method属性：用于指定Logger类中哪个方法作为前置通知
                pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法进行增强

          切入点表达式的写法：
                关键字：execution（表达式）
                表达式：
                       访问修饰符  返回值 包名.包名.包名...类名.方法名（参数列表）
                标准写法：
                        public void com_5.impl.AccountService.saveAccount()
                访问修饰符可以省略

                返回值可以使用通配符，表示任意返回值
                 * com_5.impl.AccountService.saveAccount()
                包名可以使用通配符，表示任意包。不过有几级包就需要写几个*.
                * *.*.AccountService.saveAccount()
                包名可以使用..  ，表示当前包及其子包
                * *..AccountService.saveAccount()
                类名和方法名都可以使用*进行通配
                * *..*.*()
                参数列表：
                    可以直接写数据类型：
                        基本类型直接写名称  e.g  int
                        引用类型写报名.类名的方式： e.g java.lang.String

                    可以使用通配符表示任意类型，但是必须要有参数
                 可以使用..表示有无参数均可，有参数可以是任意类型
                 全通配写法：* *..*.*(..)

                 实际开发中切入点表达式的通常写法：
                    切到业务层实现类下的所有方法
                    * com_5.impl.*.*(..)


    -->

    <!-- 配置Logger类-->
    <bean id="logger" class="com_5.utils.Logger"></bean>

    <!-- 配置AOP-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知类型，并且建立通知方法和切入点方法的关联-->
            <aop:before method="printLog" pointcut="execution(* *..*.*(*))"></aop:before>
        </aop:aspect>
    </aop:config>



</beans>